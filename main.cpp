#include <iostream>
#include <tannic.hpp> 
#include <tannic/filter.hpp>

using namespace tannic;
 
int main() {

    Tensor X(float32, {2,4,4,4}); X.initialize({ 
      {{  {-0.6634, -0.1166, -0.3332,  0.7199},
          { 0.1870,  0.4933,  0.8438,  1.4492},
          {-0.1537, -0.7270,  0.4192, -0.3193},
          {-0.4298, -0.2925, -0.6602,  0.8198}},

      {{ 0.1709,  0.3820, -0.5651, -1.2078},
          { 0.7255,  0.0407, -0.8850, -0.4389},
          {-0.4502,  0.6068,  0.2704, -0.9069},
          {-0.2983,  0.9117,  0.4849,  0.1724}},

      {{-0.9001, -0.4248, -0.4808,  0.2241},
          { 0.2041,  0.2771,  0.5841,  0.3641},
          {-0.3498, -0.6477, -0.0190,  0.4983},
          { 0.2354, -0.2089, -0.0449,  0.5041}},

      {{-0.7889, -1.6041, -0.5045, -1.0839},
          { 0.8645,  0.5683, -0.2907,  0.3367},
          {-1.2672, -0.2713, -0.6572,  0.0768},
          {-1.1677,  0.4997, -0.0966, -0.4553}}},
 
      {{{ 0.5904, -0.3835,  0.1341, -0.8212},
          {-0.6552,  0.0369, -0.9192, -0.4135},
          {-0.0401,  0.4680, -0.3843, -0.3047},
          {-0.0495,  0.5032,  0.6021, -0.3927}},

      {{ 0.0073, -0.2007,  0.2516, -0.4214},
          { 1.0371,  0.1792,  0.3646, -0.5280},
          { 1.0414,  0.3671, -0.0839, -0.5699},
          {-0.1664,  0.2872, -1.6430, -1.0185}},

      {{-1.1230, -1.1515,  0.1598,  0.1436},
          {-0.4267,  0.6967,  0.4495,  1.0124},
          {-0.6338, -0.2520, -0.9336, -0.1332},
          {-0.1811, -0.8535, -1.1717, -0.4392}},

      {{-0.1146,  0.0072, -0.0412,  0.5098},
          { 0.5513,  0.4260,  0.3625,  1.2069},
          {-0.1550, -0.2921,  0.7204, -0.6646},
          { 0.6354, -0.0745,  0.1813,  0.6837}}}
      });
      
    std::cout << X.strides() << std::endl;

    X = X.transpose(1,2);

    std::cout << X.strides() << std::endl;

    size_t batch_size = 2;
    size_t number_of_heads = 4;
    size_t sequence_length = 4;
    size_t heads_dimension = 4;

    Tensor Y = X.view(batch_size, number_of_heads, sequence_length, heads_dimension / 2, 2); 

    std::cout << Y.strides() << std::endl;

    Tensor Y_expected(float32, {2,4,4,2,2}); Y_expected.initialize( 
        {{{{{-0.6634, -0.1166},
          {-0.3332,  0.7199}},

          {{ 0.1709,  0.3820},
          {-0.5651, -1.2078}},

          {{-0.9001, -0.4248},
          {-0.4808,  0.2241}},

          {{-0.7889, -1.6041},
          {-0.5045, -1.0839}}},


        {{{ 0.1870,  0.4933},
          { 0.8438,  1.4492}},

          {{ 0.7255,  0.0407},
          {-0.8850, -0.4389}},

          {{ 0.2041,  0.2771},
          { 0.5841,  0.3641}},

          {{ 0.8645,  0.5683},
          {-0.2907,  0.3367}}},


        {{{-0.1537, -0.7270},
          { 0.4192, -0.3193}},

          {{-0.4502,  0.6068},
          { 0.2704, -0.9069}},

          {{-0.3498, -0.6477},
          {-0.0190,  0.4983}},

          {{-1.2672, -0.2713},
          {-0.6572,  0.0768}}},


        {{{-0.4298, -0.2925},
          {-0.6602,  0.8198}},

          {{-0.2983,  0.9117},
          { 0.4849,  0.1724}},

          {{ 0.2354, -0.2089},
          {-0.0449,  0.5041}},

          {{-1.1677,  0.4997},
          {-0.0966, -0.4553}}}},



        {{{{ 0.5904, -0.3835},
          { 0.1341, -0.8212}},

          {{ 0.0073, -0.2007},
          { 0.2516, -0.4214}},

          {{-1.1230, -1.1515},
          { 0.1598,  0.1436}},

          {{-0.1146,  0.0072},
          {-0.0412,  0.5098}}},


        {{{-0.6552,  0.0369},
          {-0.9192, -0.4135}},

          {{ 1.0371,  0.1792},
          { 0.3646, -0.5280}},

          {{-0.4267,  0.6967},
          { 0.4495,  1.0124}},

          {{ 0.5513,  0.4260},
          { 0.3625,  1.2069}}},


        {{{-0.0401,  0.4680},
          {-0.3843, -0.3047}},

          {{ 1.0414,  0.3671},
          {-0.0839, -0.5699}},

          {{-0.6338, -0.2520},
          {-0.9336, -0.1332}},

          {{-0.1550, -0.2921},
          { 0.7204, -0.6646}}},


        {{{-0.0495,  0.5032},
          { 0.6021, -0.3927}},

          {{-0.1664,  0.2872},
          {-1.6430, -1.0185}},

          {{-0.1811, -0.8535},
          {-1.1717, -0.4392}},

          {{ 0.6354, -0.0745},
          { 0.1813,  0.6837}}}}}
    );

    std::cout << allclose(Y,  Y_expected) << std::endl;
}


/*


(64, 16, 4, 1)
(64, 4, 16, 1)
(64, 4, 16, 2, 1)

*/